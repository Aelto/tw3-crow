
statemachine class CROW_StorageCombatDefense {

  var animation_speed_modifiers: array<int>;

  public function init() {
    this.GotoState('Waiting');
  }
  

  public function newAnimationSpeedModifier(modifier: float) {
    // the game does not send a OnActionCompleteEvent if we cancel the action to
    // create a new one, resulting in multiple modifiers. For this reason any time
    // we push a modifier, we remove the old one.
    //
    // Leaving it as a FIFO queue under the hood in case one day we might want
    // to extend it:
    this.resetOldestSpeedModifier();

    #ifdef ENABLE_DODGE_SPEEDUP {
      this.animation_speed_modifiers.PushBack(
        thePlayer.SetAnimationSpeedMultiplier(modifier, -1)
      );
    };
  }

  public function resetOldestSpeedModifier() {
    if (this.animation_speed_modifiers.Size() > 0) {
      thePlayer.ResetAnimationSpeedMultiplier( this.animation_speed_modifiers[0] );
			this.animation_speed_modifiers.EraseFast(0);
    }
  }

  public function giveCounterIframes() {
    this.PushState('Counter');
  }

}

state Waiting in CROW_StorageCombatDefense {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    LogChannel('CROW', "CROW_StorageCombatDefense - [Waiting]");
  }  
}


state Counter in CROW_StorageCombatDefense {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    LogChannel('CROW', "CROW_StorageCombatDefense - [Counter]");

    this.Counter_start();
  }
  
  entry function Counter_start() {
    this.Counter_handleInvulnerabilityFrame();

    parent.PopState();
  }
  
  latent function Counter_handleInvulnerabilityFrame() {
    var now: float;
    var start: float;
    var duration_seconds: float;

    now = theGame.GetEngineTimeAsSeconds();
    start = now;
    duration_seconds = 0.5 + CROW_getDifficultyScalingInverted() * 0.05

    while (now - start <= duration_seconds) {
      now = theGame.GetEngineTimeAsSeconds();
      thePlayer.SetIsCurrentlyDodging(true, true);

      SleepOneFrame();
    }
    
    thePlayer.SetIsCurrentlyDodging(false, false);
  }  
}


