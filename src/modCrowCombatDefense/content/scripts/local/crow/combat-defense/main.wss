// IF DISABLED: remove the animation dodge speedup
// add _NOT at the end to disable it
#define const ENABLE_DODGE_SPEEDUP;

function CROW_dodgeEntryPoint(player: CR4Player) {
  var storage: CROW_Storage = CROW_getStorage();

  storage.combat_defense.newAnimationSpeedModifier(1.35);
}

function CROW_counterEntryPoint(player: CR4Player) {
  var storage: CROW_Storage = CROW_getStorage();
  
  // Counters increase the duration of all active buffs by 1 second
  storage.combat_stamina.increaseActiveBuffsDuration(1);
  storage.combat_defense.giveCounterIframes();
}

function CROW_parryEntryPoint(player: CR4Player) {
  var storage: CROW_Storage = CROW_getStorage();
  
  // Parries increase the duration of all active buffs by 1 second
  storage.combat_stamina.increaseActiveBuffsDuration(1);
}

function CROW_onCombatActionComplete() {
  var storage: CROW_Storage = CROW_getStorage();

  storage.combat_defense.resetOldestSpeedModifier();
}

function CROW_canParryAttack(vanilla_result: bool): bool {
  return vanilla_result;
}

function CROW_canCounterAttack(): bool {
  return theInput.GetActionValue('LockAndGuard')!=0;
}

/**
 * returns true if the counter can be started
 * @param attacker 
 * @param guard_timestamps 
 */
function CROW_counterSpammingCheck(attacker: CActor, guard_timestamps: array<EngineTime>): bool {
  var now: EngineTime = theGame.GetEngineTime();
  
  // used to use this but the timestamp is actually when the attack STARTED rather
  // than when it HITS, so there is some inconcistency on long winded attacks.
  var attacker_npc: CNewNPC = attacker as CNewNPC;
  var counter_window_start_time: EngineTime = attacker_npc.GetCounterWindowStartTime();

  for timestamp: EngineTime in guard_timestamps {
    // 1st check: if the parry was BEFORE the hit (now)
    // 2nd check: if the parry was AFTER the attack started (counter_window_start_time)
    if (timestamp + EngineTimeFromFloat(0.4) >= now || timestamp >= counter_window_start_time - EngineTimeFromFloat(0.4)) {
      return true;
    }
  }

  return false;
}