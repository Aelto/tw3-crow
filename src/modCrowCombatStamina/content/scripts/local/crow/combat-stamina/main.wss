function CROW_staminaRegenPointSetter(effect: W3RegenEffect, regen_point: float, delta: float): float {
  var is_in_combat: bool = thePlayer.IsInCombat();

  if (effect.CROW_was_in_combat != is_in_combat) {
    var storage: CROW_Storage = CROW_getStorage();

    CROWLOG("CROW_staminaRegenPointSetter(), updating cache & combat state, is_in_combat = " + is_in_combat);

    effect.CROW_cached_stamina_storage = storage.combat_stamina;
    effect.CROW_was_in_combat = is_in_combat;
  }

  if (!is_in_combat) {
    return regen_point;
  }

  effect
    .CROW_cached_stamina_storage
    .tick(delta, regen_point);

  return effect
    .CROW_cached_stamina_storage
    .getRegenerationPerSecond(regen_point);
}

function CROW_damageModifier(
  action: W3DamageAction,
  playerAttacker: CR4Player,
  attackAction: W3Action_Attack
) {
  var attacker: CActor;

  attacker = action.attacker as CActor;

  if (action.WasDodged()) {
    return;
  }

  // when geralt is the attacker and it's not a DOT
  if ((attacker as CPlayer) && !(action.victim as CPlayer) && !action.IsDoTDamage()) {

    if (playerAttacker.IsHeavyAttack(attackAction.GetAttackName())) {
      CROW_getStorage().combat_stamina.addRegenBuff(3);
      
      var weapon_entity: CItemEntity;
      weapon_entity = thePlayer.inv.GetItemEntityUnsafe(thePlayer.inv.GetItemFromSlot('r_weapon'));
      weapon_entity.PlayEffectSingle('runeword1_fire_trail');
      weapon_entity.PlayEffectSingle('aerondight_special_trail');
    }

    else if (playerAttacker.IsLightAttack(attackAction.GetAttackName())) {
      CROW_getStorage().combat_stamina.addRegenBuff(1);
      
      var weapon_entity: CItemEntity;
      weapon_entity = thePlayer.inv.GetItemEntityUnsafe(thePlayer.inv.GetItemFromSlot('r_weapon'));
      weapon_entity.PlayEffectSingle('runeword1_fire_trail');
    }

  }
}

function CROW_onWolfHeadModuleExperienceTick(module: CR4HudModuleWolfHead, m_fxSetExperience: CScriptedFlashFunction): bool {
  var is_in_combat: bool = thePlayer.IsInCombat();

  if (module.CROW_was_in_combat != is_in_combat) {
    var storage: CROW_Storage = CROW_getStorage();

    CROWLOG("CROW_onWolfHeadModuleExperienceTick(), updating cache & combat state, is_in_combat = " + is_in_combat);

    module.CROW_cached_stamina_storage = storage.combat_stamina;
    module.CROW_was_in_combat = is_in_combat;
  }

  if (is_in_combat) {
    var flat_stamina_per_second: float = module
      .CROW_cached_stamina_storage
      .getRegenerationPerSecond(module.CROW_cached_stamina_storage.cached_stamina_regen_points);

    m_fxSetExperience.InvokeSelfOneArg(FlashArgNumber(flat_stamina_per_second / 100));
  }

  return is_in_combat;
}
