function CROW_staminaRegenPointSetter(regen_point: float): float {
  var is_in_combat: bool = thePlayer.IsInCombat();

  if (!is_in_combat) {
    return regen_point;
  }

  var module: CROW_StorageCombatStamina = thePlayer.crow_storage.combat_stamina;
  var amount: float = module.getRegenerationPerSecond(regen_point / module.cached_tick_delta) * module.cached_tick_delta;
  module.cached_stamina_regen_points = amount;

  return amount;
}

function CROW_staminaRegenPointTick(delta: float) {
  var is_in_combat: bool = thePlayer.IsInCombat();

  if (is_in_combat) {
    thePlayer
      .crow_storage
      .combat_stamina
      .tick(delta);
  }
}

function CROW_damageModifier(
  action: W3DamageAction,
  playerAttacker: CR4Player,
  attackAction: W3Action_Attack
) {
  var attacker: CActor;

  attacker = action.attacker as CActor;

  if (action.WasDodged()) {
    return;
  }

  // when geralt is the attacker and it's not a DOT
  if ((attacker as CPlayer) && !(action.victim as CPlayer) && !action.IsDoTDamage()) {

    if (playerAttacker.IsHeavyAttack(attackAction.GetAttackName())) {
      CROW_getStorage().combat_stamina.addRegenBuff(3);
    }

    else if (playerAttacker.IsLightAttack(attackAction.GetAttackName())) {
      CROW_getStorage().combat_stamina.addRegenBuff(1);
    }

  }
}

function CROW_onWolfHeadModuleExperienceTick(m_fxSetExperience: CScriptedFlashFunction): bool {
  var is_in_combat: bool = thePlayer.IsInCombat();

  if (is_in_combat) {
    var flat_stamina_per_second: float = thePlayer
      .crow_storage
      .combat_stamina
      .cached_stamina_regen_points;

    m_fxSetExperience.InvokeSelfOneArg(FlashArgNumber(flat_stamina_per_second));
  }

  return is_in_combat;
}
